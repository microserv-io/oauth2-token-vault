// Code generated by mockery v2.44.1. DO NOT EDIT.

package oauthapp

import (
	context "context"

	oauth2 "github.com/microserv-io/oauth2-token-vault/internal/domain/oauth2"
	mock "github.com/stretchr/testify/mock"

	xoauth2 "golang.org/x/oauth2"
)

// MockTokenSourceFactory is an autogenerated mock type for the TokenSourceFactory type
type MockTokenSourceFactory struct {
	mock.Mock
}

type MockTokenSourceFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenSourceFactory) EXPECT() *MockTokenSourceFactory_Expecter {
	return &MockTokenSourceFactory_Expecter{mock: &_m.Mock}
}

// NewTokenSource provides a mock function with given fields: ctx, tokenSourceConfig
func (_m *MockTokenSourceFactory) NewTokenSource(ctx context.Context, tokenSourceConfig *oauth2.TokenSourceConfig) (xoauth2.TokenSource, error) {
	ret := _m.Called(ctx, tokenSourceConfig)

	if len(ret) == 0 {
		panic("no return value specified for NewTokenSource")
	}

	var r0 xoauth2.TokenSource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.TokenSourceConfig) (xoauth2.TokenSource, error)); ok {
		return rf(ctx, tokenSourceConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth2.TokenSourceConfig) xoauth2.TokenSource); ok {
		r0 = rf(ctx, tokenSourceConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xoauth2.TokenSource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth2.TokenSourceConfig) error); ok {
		r1 = rf(ctx, tokenSourceConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenSourceFactory_NewTokenSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTokenSource'
type MockTokenSourceFactory_NewTokenSource_Call struct {
	*mock.Call
}

// NewTokenSource is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenSourceConfig *oauth2.TokenSourceConfig
func (_e *MockTokenSourceFactory_Expecter) NewTokenSource(ctx interface{}, tokenSourceConfig interface{}) *MockTokenSourceFactory_NewTokenSource_Call {
	return &MockTokenSourceFactory_NewTokenSource_Call{Call: _e.mock.On("NewTokenSource", ctx, tokenSourceConfig)}
}

func (_c *MockTokenSourceFactory_NewTokenSource_Call) Run(run func(ctx context.Context, tokenSourceConfig *oauth2.TokenSourceConfig)) *MockTokenSourceFactory_NewTokenSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*oauth2.TokenSourceConfig))
	})
	return _c
}

func (_c *MockTokenSourceFactory_NewTokenSource_Call) Return(_a0 xoauth2.TokenSource, _a1 error) *MockTokenSourceFactory_NewTokenSource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenSourceFactory_NewTokenSource_Call) RunAndReturn(run func(context.Context, *oauth2.TokenSourceConfig) (xoauth2.TokenSource, error)) *MockTokenSourceFactory_NewTokenSource_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenSourceFactory creates a new instance of MockTokenSourceFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenSourceFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenSourceFactory {
	mock := &MockTokenSourceFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
